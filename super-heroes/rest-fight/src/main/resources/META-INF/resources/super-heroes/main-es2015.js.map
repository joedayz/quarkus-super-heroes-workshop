{"version":3,"sources":["./src/app/shared/model/fight.ts","./src/app/shared/model/modelLong.ts","./src/environments/environment.ts","./src/app/fight/fight.component.ts","./src/app/shared/configuration.ts","./src/app/shared/model/fightFightDate.ts","./src/app/shared/model/modelString.ts","./src/app/shared/model/models.ts","./src/app/shared/index.ts","./src/app/shared/variables.ts","./src/app/shared/model/hero.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/shared/model/villain.ts","./src/app/fight-list/fight-list.component.html","./src/app/shared/api/fight.service.ts","./src/app/fight/fight.component.html","./src/app/shared/api/api.ts","./src/app/fight-list/fight-list.component.ts","./src/app/shared/api.module.ts","./src/app/shared/model/uRI.ts","./src/app/shared/model/fighters.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */import { FightFightDate } from './fightFightDate';\n\n\n/**\n * Each fight has a winner and a loser\n */\n// tag::adocModel[]\nexport interface Fight {\n    id?: number;\n    fightDate: FightFightDate;\n    winnerName: string;\n    winnerLevel: number;\n    winnerPicture: string;\n    loserName: string;\n    loserLevel: number;\n    loserPicture: string;\n}\n// end::adocModel[]\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type ModelLong = number;","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { Fighters, FightService, Hero, Villain } from '../shared';\n\n@Component({\n  selector: 'hero-fight',\n  templateUrl: './fight.component.html'\n})\nexport class FightComponent implements OnInit {\n\n  figthers: Fighters = new Fighters();\n  winner: String;\n\n  constructor(private fightService: FightService) {\n  }\n\n  ngOnInit() {\n    this.newFighters();\n  }\n\n  fight() {\n    this.fightService.apiFightsPost(this.figthers).subscribe(\n      fight => {\n        this.fightService.onNewFight(fight);\n        this.winner = fight.winnerName;\n      }\n    );\n  }\n\n  newFighters() {\n    this.winner = null;\n    this.fightService.apiFightsRandomfightersGet().subscribe(figthers => this.figthers = figthers);\n  }\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface FightFightDate { \n    nanos?: number;\n    seconds?: number;\n    epochSecond?: number;\n    nano?: number;\n}","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type ModelString = string;","export * from './fight';\nexport * from './fightFightDate';\nexport * from './fighters';\nexport * from './hero';\nexport * from './villain';\nexport * from './modelLong';\nexport * from './modelString';\nexport * from './uRI';\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * The hero fighting against the villain\n */\nexport class Hero {\n  constructor(\n    public name?: string,\n    public picture?: string,\n    public powers?: string,\n    public level?: bigint\n) {\n}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'Super Heroes Fight';\n}\n","export default \"<div style=\\\"text-align:center\\\" class=\\\"content\\\">\\n    <h1>\\n        Welcome to {{title}}!\\n    </h1>\\n    <mat-divider></mat-divider>\\n    <hero-fight></hero-fight>\\n    <hero-fight-list></hero-fight-list>\\n</div>\\n\";","import { BrowserModule } from '@angular/platform-browser';\nimport {NgModule, Provider, Type} from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { FightListComponent } from './fight-list/fight-list.component';\nimport { FightComponent } from './fight/fight.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTableModule } from '@angular/material/table';\nimport { FightService } from './shared';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatGridListModule } from '@angular/material/grid-list';\n\ndeclare module \"@angular/core\" {\n  interface ModuleWithProviders<T = any> {\n    ngModule: Type<T>;\n    providers?: Provider[];\n  }\n}\n@NgModule({\n  declarations: [\n    AppComponent,\n    FightListComponent,\n    FightComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatDividerModule,\n    MatCardModule,\n    MatButtonModule,\n    MatGridListModule,\n    MatTableModule\n  ],\n  providers: [FightService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * The villain fighting against the hero\n */\nexport class Villain {\n  constructor(\n    public name?: string,\n    public picture?: string,\n    public powers?: string,\n    public level?: bigint\n  ) {\n  }\n}\n","export default \"<table mat-table [dataSource]=\\\"dataSource\\\"  class=\\\"mat-elevation-z8 table table-striped\\\">\\n    <thead>\\n    <ng-container matColumnDef=\\\"id\\\">\\n        <th scope=\\\"col\\\" class=\\\"fight-list-header thead-dark\\\" mat-header-cell *matHeaderCellDef > Id </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"fightDate\\\">\\n        <th scope=\\\"col\\\" class=\\\"fight-list-header thead-dark\\\" mat-header-cell *matHeaderCellDef> Fight Date </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.fightDate | date: 'medium'}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"winnerName\\\">\\n        <th scope=\\\"col\\\" class=\\\"fight-list-header thead-dark\\\" mat-header-cell *matHeaderCellDef> Winner </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.winnerName}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"loserName\\\">\\n        <th scope=\\\"col\\\" class=\\\"fight-list-header thead-dark\\\" mat-header-cell *matHeaderCellDef> Loser </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.loserName}} </td>\\n    </ng-container>\\n    </thead>\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\";","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport {EventEmitter, Inject, Injectable, Optional, Output} from '@angular/core';\nimport {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\n\nimport {Fight} from '../model/fight';\nimport {Fighters} from '../model/fighters';\nimport {ModelLong} from '../model/modelLong';\nimport {ModelString} from '../model/modelString';\nimport {URI} from '../model/uRI';\n\nimport {BASE_PATH} from '../variables';\nimport {Configuration} from '../configuration';\n\n\n@Injectable()\nexport class FightService {\n\n  protected basePath = 'http://localhost:8082';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n\n  @Output() emitter = new EventEmitter<Fight>();\n\n\n  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n    if (basePath) {\n      this.basePath = basePath;\n    }\n    if (!window.location.host.includes(\"localhost\")) {\n      this.basePath = window.location.protocol + \"//\" + window.location.host;\n    }\n\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = basePath || configuration.basePath || this.basePath;\n    }\n  }\n\n  /**\n   * @param consumes string[] mime-types\n   * @return true: consumes contains 'multipart/form-data', false: otherwise\n   */\n  private canConsumeForm(consumes: string[]): boolean {\n    const form = 'multipart/form-data';\n    for (const consume of consumes) {\n      if (form === consume) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  /**\n   * Returns all the fights from the database\n   *\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  // tag::adocService[]\n  public apiFightsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Fight>>;\n  public apiFightsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Fight>>>;\n  public apiFightsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Fight>>>;\n\n  // end::adocService[]\n  public apiFightsGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Array<Fight>>(`${this.basePath}/api/fights`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   *\n   *\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public apiFightsHelloGet(observe?: 'body', reportProgress?: boolean): Observable<ModelString>;\n  public apiFightsHelloGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelString>>;\n  public apiFightsHelloGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelString>>;\n  public apiFightsHelloGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'text/plain'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<ModelString>(`${this.basePath}/api/fights/hello`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   * Returns a fight for a given identifier\n   *\n   * @param id Fight identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public apiFightsIdGet(id: ModelLong, observe?: 'body', reportProgress?: boolean): Observable<Fight>;\n  public apiFightsIdGet(id: ModelLong, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Fight>>;\n  public apiFightsIdGet(id: ModelLong, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Fight>>;\n  public apiFightsIdGet(id: ModelLong, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling apiFightsIdGet.');\n    }\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Fight>(`${this.basePath}/api/fights/${encodeURIComponent(String(id))}`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  public onNewFight(fight: Fight) {\n    this.emitter.emit(fight);\n  }\n\n  /**\n   * Creates a fight between two fighters\n   *\n   * @param body The two fighters fighting\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public apiFightsPost(body: Fighters, observe?: 'body', reportProgress?: boolean): Observable<Fight>;\n  public apiFightsPost(body: Fighters, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<URI>>;\n  public apiFightsPost(body: Fighters, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<URI>>;\n  public apiFightsPost(body: Fighters, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling apiFightsPost.');\n    }\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [\n      'application/json'\n    ];\n    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected != undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    return this.httpClient.post<URI>(`${this.basePath}/api/fights`,\n      body,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   * Returns two random fighters\n   *\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  // tag::adocService[]\n  public apiFightsRandomfightersGet(observe?: 'body', reportProgress?: boolean): Observable<Fighters>;\n  public apiFightsRandomfightersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Fighters>>;\n  public apiFightsRandomfightersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Fighters>>;\n  // end::adocService[]\n  public apiFightsRandomfightersGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Fighters>(`${this.basePath}/api/fights/randomfighters`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n}\n","export default \"<div class=\\\"row\\\" id=\\\"fight-row\\\">\\n    <div class=\\\"col-xs-6 col-sm-4 col-md-4\\\">\\n        <div class=\\\"hero card-pf\\\" [className]=\\\"winner == figthers.hero.name ? 'hero-winner-card' : 'off'\\\">\\n            <h2 class=\\\"hero-name\\\">\\n                {{figthers.hero.name}}\\n            </h2>\\n            <div class=\\\"card-pf-body\\\">\\n                <img class=\\\"rounded\\\" src=\\\"{{figthers.hero.picture}}\\\">\\n\\n                <h2><i class=\\\"fas fa-bolt\\\"></i> {{figthers.hero.level}}</h2>\\n                <h2><a data-toggle=\\\"collapse\\\" href=\\\"#heroPowers\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"heroPowers\\\"><i class=\\\"powers hero fas fa-atom\\\"></i></a></h2>\\n\\n                <div class=\\\"collapse\\\" id=\\\"heroPowers\\\">\\n                    {{figthers.hero.powers}}\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"col-xs-6 col-sm-4 col-md-4\\\">\\n        <div class=\\\"card-pf\\\">\\n            <div class=\\\"card-pf-body\\\">\\n                <button (click)=\\\"newFighters()\\\" class=\\\"btn btn-primary btn-block btn-lg\\\"><h4><i class=\\\"fas fa-random\\\"></i> NEW FIGHTERS</h4></button>\\n                <button (click)=\\\"fight()\\\" class=\\\"btn btn-danger btn-block btn-lg\\\"><h4><i class=\\\"fab fa-battle-net\\\"></i> FIGHT !</h4></button>\\n            </div>\\n\\n            <div *ngIf=\\\"winner\\\" class=\\\"winner-text\\\">Winner is <span [className]=\\\"winner == figthers.villain.name ? 'winner-villain' : 'winner-hero'\\\">{{winner}}</span></div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"col-xs-6 col-sm-4 col-md-4\\\">\\n        <div class=\\\"villain card-pf\\\" [className]=\\\"winner == figthers.villain.name ? 'villain-winner-card' : 'off'\\\">\\n            <h2 class=\\\"villain-name\\\">\\n                {{figthers.villain.name}}\\n            </h2>\\n            <div class=\\\"card-pf-body\\\">\\n                <img class=\\\"rounded\\\" src=\\\"{{figthers.villain.picture}}\\\">\\n\\n                <h2><i class=\\\"fas fa-bolt\\\"></i> {{figthers.villain.level}}</h2>\\n                <h2><a data-toggle=\\\"collapse\\\" href=\\\"#villainPowers\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"villainPowers\\\"><i class=\\\"powers villain fas fa-atom\\\"></i></a></h2>\\n\\n                <div class=\\\"collapse\\\" id=\\\"villainPowers\\\">\\n                    {{figthers.villain.powers}}\\n                </div>\\n\\n            </div>\\n        </div>\\n    </div>\\n\\n</div>\\n\";","export * from './fight.service';\nimport { FightService } from './fight.service';\nexport const APIS = [FightService];\n","import {Component, OnInit} from '@angular/core';\nimport { Fight, FightService } from '../shared';\nimport {MatTableDataSource} from \"@angular/material/table\";\n\n\n@Component({\n  selector: 'hero-fight-list',\n  templateUrl: './fight-list.component.html',\n  styles: []\n})\nexport class FightListComponent implements OnInit {\n\n  dataSource: MatTableDataSource < Fight > ;\n  displayedColumns: string[] = ['id', 'fightDate', 'winnerName', 'loserName'];\n\n  constructor(private fightService: FightService) {\n    this.dataSource = new MatTableDataSource<Fight>();\n    fightService.emitter.subscribe(fight => {\n      const data = this.dataSource.data;\n      data.unshift(fight);\n      this.dataSource.data = data;\n    })\n  }\n\n  ngOnInit() {\n    this.fightService.apiFightsGet().subscribe(fights => {\n      this.dataSource.data = fights.reverse();\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { FightService } from './api/fight.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    FightService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface URI { \n    string?: string;\n    rawAuthority?: string;\n    rawFragment?: string;\n    rawPath?: string;\n    rawQuery?: string;\n    rawSchemeSpecificPart?: string;\n    rawUserInfo?: string;\n    absolute?: boolean;\n    opaque?: boolean;\n}","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { Hero } from './hero';\nimport { Villain } from './villain';\n\n\n/**\n * A fight between one hero and one villain\n */\nexport class Fighters {\n  constructor(\n    public hero?: Hero,\n    public villain?: Villain,\n  ) {\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}