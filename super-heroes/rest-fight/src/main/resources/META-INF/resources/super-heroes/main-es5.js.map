{"version":3,"sources":["webpack:///src/app/shared/model/fight.ts","webpack:///src/app/shared/model/modelLong.ts","webpack:///src/environments/environment.ts","webpack:///src/app/fight/fight.component.ts","webpack:///src/app/shared/configuration.ts","webpack:///src/app/shared/model/fightFightDate.ts","webpack:///src/app/shared/model/modelString.ts","webpack:///src/app/shared/model/models.ts","webpack:///src/app/shared/index.ts","webpack:///src/app/shared/variables.ts","webpack:///src/app/shared/model/hero.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/shared/model/villain.ts","webpack:///src/app/fight-list/fight-list.component.html","webpack:///src/app/shared/api/fight.service.ts","webpack:///src/app/fight/fight.component.html","webpack:///src/app/shared/api/api.ts","webpack:///src/app/fight-list/fight-list.component.ts","webpack:///src/app/shared/api.module.ts","webpack:///src/app/shared/model/uRI.ts","webpack:///src/app/shared/model/fighters.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","FightComponent","fightService","figthers","newFighters","apiFightsPost","subscribe","fight","onNewFight","winner","winnerName","apiFightsRandomfightersGet","selector","template","Configuration","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","contentTypes","length","undefined","type","find","x","isJsonMime","accepts","mime","jsonMime","RegExp","test","toLowerCase","BASE_PATH","COLLECTION_FORMATS","Hero","name","picture","powers","level","AppComponent","title","AppModule","declarations","imports","providers","bootstrap","Villain","FightService","httpClient","configuration","defaultHeaders","emitter","window","location","host","includes","protocol","consumes","form","consume","observe","reportProgress","headers","httpHeaderAccepts","httpHeaderAcceptSelected","selectHeaderAccept","set","get","id","Error","encodeURIComponent","String","emit","body","httpContentTypeSelected","selectHeaderContentType","post","APIS","FightListComponent","displayedColumns","dataSource","data","unshift","apiFightsGet","fights","reverse","ApiModule","parentModule","http","configurationFactory","ngModule","provide","useFactory","exports","Fighters","hero","villain","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */import { FightFightDate } from './fightFightDate';\n\n\n/**\n * Each fight has a winner and a loser\n */\n// tag::adocModel[]\nexport interface Fight {\n    id?: number;\n    fightDate: FightFightDate;\n    winnerName: string;\n    winnerLevel: number;\n    winnerPicture: string;\n    loserName: string;\n    loserLevel: number;\n    loserPicture: string;\n}\n// end::adocModel[]\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type ModelLong = number;","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { Fighters, FightService, Hero, Villain } from '../shared';\n\n@Component({\n  selector: 'hero-fight',\n  templateUrl: './fight.component.html'\n})\nexport class FightComponent implements OnInit {\n\n  figthers: Fighters = new Fighters();\n  winner: String;\n\n  constructor(private fightService: FightService) {\n  }\n\n  ngOnInit() {\n    this.newFighters();\n  }\n\n  fight() {\n    this.fightService.apiFightsPost(this.figthers).subscribe(\n      fight => {\n        this.fightService.onNewFight(fight);\n        this.winner = fight.winnerName;\n      }\n    );\n  }\n\n  newFighters() {\n    this.winner = null;\n    this.fightService.apiFightsRandomfightersGet().subscribe(figthers => this.figthers = figthers);\n  }\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface FightFightDate { \n    nanos?: number;\n    seconds?: number;\n    epochSecond?: number;\n    nano?: number;\n}","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type ModelString = string;","export * from './fight';\nexport * from './fightFightDate';\nexport * from './fighters';\nexport * from './hero';\nexport * from './villain';\nexport * from './modelLong';\nexport * from './modelString';\nexport * from './uRI';\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * The hero fighting against the villain\n */\nexport class Hero {\n  constructor(\n    public name?: string,\n    public picture?: string,\n    public powers?: string,\n    public level?: bigint\n) {\n}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'Super Heroes Fight';\n}\n","export default \"<div style=\\\"text-align:center\\\" class=\\\"content\\\">\\n    <h1>\\n        Welcome to {{title}}!\\n    </h1>\\n    <mat-divider></mat-divider>\\n    <hero-fight></hero-fight>\\n    <hero-fight-list></hero-fight-list>\\n</div>\\n\";","import { BrowserModule } from '@angular/platform-browser';\nimport {NgModule, Provider, Type} from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { FightListComponent } from './fight-list/fight-list.component';\nimport { FightComponent } from './fight/fight.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTableModule } from '@angular/material/table';\nimport { FightService } from './shared';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatGridListModule } from '@angular/material/grid-list';\n\ndeclare module \"@angular/core\" {\n  interface ModuleWithProviders<T = any> {\n    ngModule: Type<T>;\n    providers?: Provider[];\n  }\n}\n@NgModule({\n  declarations: [\n    AppComponent,\n    FightListComponent,\n    FightComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatDividerModule,\n    MatCardModule,\n    MatButtonModule,\n    MatGridListModule,\n    MatTableModule\n  ],\n  providers: [FightService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * The villain fighting against the hero\n */\nexport class Villain {\n  constructor(\n    public name?: string,\n    public picture?: string,\n    public powers?: string,\n    public level?: bigint\n  ) {\n  }\n}\n","export default \"<table mat-table [dataSource]=\\\"dataSource\\\"  class=\\\"mat-elevation-z8 table table-striped\\\">\\n    <thead>\\n    <ng-container matColumnDef=\\\"id\\\">\\n        <th scope=\\\"col\\\" class=\\\"fight-list-header thead-dark\\\" mat-header-cell *matHeaderCellDef > Id </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"fightDate\\\">\\n        <th scope=\\\"col\\\" class=\\\"fight-list-header thead-dark\\\" mat-header-cell *matHeaderCellDef> Fight Date </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.fightDate | date: 'medium'}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"winnerName\\\">\\n        <th scope=\\\"col\\\" class=\\\"fight-list-header thead-dark\\\" mat-header-cell *matHeaderCellDef> Winner </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.winnerName}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"loserName\\\">\\n        <th scope=\\\"col\\\" class=\\\"fight-list-header thead-dark\\\" mat-header-cell *matHeaderCellDef> Loser </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.loserName}} </td>\\n    </ng-container>\\n    </thead>\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\";","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport {EventEmitter, Inject, Injectable, Optional, Output} from '@angular/core';\nimport {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\n\nimport {Fight} from '../model/fight';\nimport {Fighters} from '../model/fighters';\nimport {ModelLong} from '../model/modelLong';\nimport {ModelString} from '../model/modelString';\nimport {URI} from '../model/uRI';\n\nimport {BASE_PATH} from '../variables';\nimport {Configuration} from '../configuration';\n\n\n@Injectable()\nexport class FightService {\n\n  protected basePath = 'http://localhost:8082';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n\n  @Output() emitter = new EventEmitter<Fight>();\n\n\n  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n    if (basePath) {\n      this.basePath = basePath;\n    }\n    if (!window.location.host.includes(\"localhost\")) {\n      this.basePath = window.location.protocol + \"//\" + window.location.host;\n    }\n\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = basePath || configuration.basePath || this.basePath;\n    }\n  }\n\n  /**\n   * @param consumes string[] mime-types\n   * @return true: consumes contains 'multipart/form-data', false: otherwise\n   */\n  private canConsumeForm(consumes: string[]): boolean {\n    const form = 'multipart/form-data';\n    for (const consume of consumes) {\n      if (form === consume) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  /**\n   * Returns all the fights from the database\n   *\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  // tag::adocService[]\n  public apiFightsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Fight>>;\n  public apiFightsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Fight>>>;\n  public apiFightsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Fight>>>;\n\n  // end::adocService[]\n  public apiFightsGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Array<Fight>>(`${this.basePath}/api/fights`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   *\n   *\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public apiFightsHelloGet(observe?: 'body', reportProgress?: boolean): Observable<ModelString>;\n  public apiFightsHelloGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelString>>;\n  public apiFightsHelloGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelString>>;\n  public apiFightsHelloGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'text/plain'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<ModelString>(`${this.basePath}/api/fights/hello`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   * Returns a fight for a given identifier\n   *\n   * @param id Fight identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public apiFightsIdGet(id: ModelLong, observe?: 'body', reportProgress?: boolean): Observable<Fight>;\n  public apiFightsIdGet(id: ModelLong, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Fight>>;\n  public apiFightsIdGet(id: ModelLong, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Fight>>;\n  public apiFightsIdGet(id: ModelLong, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling apiFightsIdGet.');\n    }\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Fight>(`${this.basePath}/api/fights/${encodeURIComponent(String(id))}`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  public onNewFight(fight: Fight) {\n    this.emitter.emit(fight);\n  }\n\n  /**\n   * Creates a fight between two fighters\n   *\n   * @param body The two fighters fighting\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public apiFightsPost(body: Fighters, observe?: 'body', reportProgress?: boolean): Observable<Fight>;\n  public apiFightsPost(body: Fighters, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<URI>>;\n  public apiFightsPost(body: Fighters, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<URI>>;\n  public apiFightsPost(body: Fighters, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling apiFightsPost.');\n    }\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [\n      'application/json'\n    ];\n    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected != undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    return this.httpClient.post<URI>(`${this.basePath}/api/fights`,\n      body,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   * Returns two random fighters\n   *\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  // tag::adocService[]\n  public apiFightsRandomfightersGet(observe?: 'body', reportProgress?: boolean): Observable<Fighters>;\n  public apiFightsRandomfightersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Fighters>>;\n  public apiFightsRandomfightersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Fighters>>;\n  // end::adocService[]\n  public apiFightsRandomfightersGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Fighters>(`${this.basePath}/api/fights/randomfighters`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n}\n","export default \"<div class=\\\"row\\\" id=\\\"fight-row\\\">\\n    <div class=\\\"col-xs-6 col-sm-4 col-md-4\\\">\\n        <div class=\\\"hero card-pf\\\" [className]=\\\"winner == figthers.hero.name ? 'hero-winner-card' : 'off'\\\">\\n            <h2 class=\\\"hero-name\\\">\\n                {{figthers.hero.name}}\\n            </h2>\\n            <div class=\\\"card-pf-body\\\">\\n                <img class=\\\"rounded\\\" src=\\\"{{figthers.hero.picture}}\\\">\\n\\n                <h2><i class=\\\"fas fa-bolt\\\"></i> {{figthers.hero.level}}</h2>\\n                <h2><a data-toggle=\\\"collapse\\\" href=\\\"#heroPowers\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"heroPowers\\\"><i class=\\\"powers hero fas fa-atom\\\"></i></a></h2>\\n\\n                <div class=\\\"collapse\\\" id=\\\"heroPowers\\\">\\n                    {{figthers.hero.powers}}\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"col-xs-6 col-sm-4 col-md-4\\\">\\n        <div class=\\\"card-pf\\\">\\n            <div class=\\\"card-pf-body\\\">\\n                <button (click)=\\\"newFighters()\\\" class=\\\"btn btn-primary btn-block btn-lg\\\"><h4><i class=\\\"fas fa-random\\\"></i> NEW FIGHTERS</h4></button>\\n                <button (click)=\\\"fight()\\\" class=\\\"btn btn-danger btn-block btn-lg\\\"><h4><i class=\\\"fab fa-battle-net\\\"></i> FIGHT !</h4></button>\\n            </div>\\n\\n            <div *ngIf=\\\"winner\\\" class=\\\"winner-text\\\">Winner is <span [className]=\\\"winner == figthers.villain.name ? 'winner-villain' : 'winner-hero'\\\">{{winner}}</span></div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"col-xs-6 col-sm-4 col-md-4\\\">\\n        <div class=\\\"villain card-pf\\\" [className]=\\\"winner == figthers.villain.name ? 'villain-winner-card' : 'off'\\\">\\n            <h2 class=\\\"villain-name\\\">\\n                {{figthers.villain.name}}\\n            </h2>\\n            <div class=\\\"card-pf-body\\\">\\n                <img class=\\\"rounded\\\" src=\\\"{{figthers.villain.picture}}\\\">\\n\\n                <h2><i class=\\\"fas fa-bolt\\\"></i> {{figthers.villain.level}}</h2>\\n                <h2><a data-toggle=\\\"collapse\\\" href=\\\"#villainPowers\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"villainPowers\\\"><i class=\\\"powers villain fas fa-atom\\\"></i></a></h2>\\n\\n                <div class=\\\"collapse\\\" id=\\\"villainPowers\\\">\\n                    {{figthers.villain.powers}}\\n                </div>\\n\\n            </div>\\n        </div>\\n    </div>\\n\\n</div>\\n\";","export * from './fight.service';\nimport { FightService } from './fight.service';\nexport const APIS = [FightService];\n","import {Component, OnInit} from '@angular/core';\nimport { Fight, FightService } from '../shared';\nimport {MatTableDataSource} from \"@angular/material/table\";\n\n\n@Component({\n  selector: 'hero-fight-list',\n  templateUrl: './fight-list.component.html',\n  styles: []\n})\nexport class FightListComponent implements OnInit {\n\n  dataSource: MatTableDataSource < Fight > ;\n  displayedColumns: string[] = ['id', 'fightDate', 'winnerName', 'loserName'];\n\n  constructor(private fightService: FightService) {\n    this.dataSource = new MatTableDataSource<Fight>();\n    fightService.emitter.subscribe(fight => {\n      const data = this.dataSource.data;\n      data.unshift(fight);\n      this.dataSource.data = data;\n    })\n  }\n\n  ngOnInit() {\n    this.fightService.apiFightsGet().subscribe(fights => {\n      this.dataSource.data = fights.reverse();\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { FightService } from './api/fight.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    FightService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface URI { \n    string?: string;\n    rawAuthority?: string;\n    rawFragment?: string;\n    rawPath?: string;\n    rawQuery?: string;\n    rawSchemeSpecificPart?: string;\n    rawUserInfo?: string;\n    absolute?: boolean;\n    opaque?: boolean;\n}","/**\n * Fight API\n * This API allows a hero and a villain to fight\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { Hero } from './hero';\nimport { Villain } from './villain';\n\n\n/**\n * A fight between one hero and one villain\n */\nexport class Fighters {\n  constructor(\n    public hero?: Hero,\n    public villain?: Villain,\n  ) {\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}